
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Попытка
		НовоеЗначение = Новый УникальныйИдентификатор(УникальныйИдентификатор);
	Исключение
		Сообщить("Неверная строка идентификатора!", СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки; 
	ирОбщий.ПрименитьИзмененияИЗакрытьФормуЛкс(ЭтаФорма, НовоеЗначение);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ТипЗнч(НачальноеЗначениеВыбора) <> Тип("УникальныйИдентификатор") Тогда
		НачальноеЗначениеВыбора = Новый УникальныйИдентификатор();
	КонецЕсли; 
	ирОбщий.ФормаОбъекта_ОбновитьЗаголовокЛкс(ЭтаФорма);
	УстановитьПрямойИД("" + НачальноеЗначениеВыбора);

КонецПроцедуры

Процедура УстановитьПрямойИД(НовыйИД)
	
	УникальныйИдентификатор = НовыйИД;
	УникальныйИдентификаторПриИзменении();
	
КонецПроцедуры

Процедура ИзПредставленияНенайденногоОбъектаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	мПлатформа = ирКэш.Получить();
	#Если Сервер И Не Сервер Тогда
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	УникальныйИдентификаторЛ = мПлатформа.УникальныйИдентификаторИзСтроки(Текст);
	Если УникальныйИдентификаторЛ <> Неопределено Тогда
		УстановитьПрямойИД(УникальныйИдентификаторЛ);
		ЭтаФорма.Модифицированность = Истина;
		Элемент.ЦветФонаПоля = WebЦвета.СветлоЗеленый;
	Иначе
		Маркер = "e1cib/data/";
		Если ирОбщий.СтрокиРавныЛкс(Лев(Текст, СтрДлина(Маркер)), Маркер) Тогда
			ТекстСсылки = Сред(Текст, СтрДлина(Маркер) + 1);
			Разделитель = "?ref=";
			ОбратныйИдентификатор = ирОбщий.ПоследнийФрагментЛкс(ТекстСсылки, Разделитель);
			УстановитьПрямойИД(ОбратныйИдентификатор);
		КонецЕсли; 
		Элемент.ЦветФонаПоля = WebЦвета.СветлоРозовый;
	КонецЕсли;

КонецПроцедуры

Процедура ОсновныеДействияФормыСгенерировать(Кнопка)
	
	УстановитьПрямойИД("" + Новый УникальныйИдентификатор);
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура УникальныйИдентификаторПриИзменении(Элемент = Неопределено)
	
	ЭтаФорма.Обратный = ирОбщий.ПолучитьГУИДИнверсныйИзПрямогоЛкс(УникальныйИдентификатор);

	ЗаполнитьОписание(); // PushA
	
КонецПроцедуры

Процедура ОбратныйПриИзменении(Элемент = Неопределено)

	УникальныйИдентификатор = ирОбщий.ПолучитьГУИДПрямойИзИнверсногоЛкс(Обратный);
	
	ЗаполнитьОписание(); // PushA
	
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	
	ирОбщий.Форма_ВнешнееСобытиеЛкс(ЭтаФорма, Источник, Событие, Данные);

КонецПроцедуры

Процедура ТабличноеПолеПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт 
	
	ирОбщий.ТабличноеПолеПриПолученииДанныхЛкс(ЭтаФорма, Элемент, ОформленияСтрок);

КонецПроцедуры

#Область PushA

Процедура ЗаполнитьОписание()
	
	Если ЭлементыФормы.Найти("Описание") = Неопределено Тогда 
		ЭтаФорма.Высота = ЭтаФорма.Высота + 21;
		Элемент = ЭлементыФормы.Добавить(Тип("Надпись"), "Описание");
		Элемент.Лево = 8;
		Элемент.Верх = 98;
		Элемент.Ширина = 323;
		Элемент.Высота = 19;
		Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭтаФорма.Панель, ГраницаЭлементаУправления.Право);
	КонецЕсли;
	
	Описание = Новый Массив;
	Описание.Добавить(UUID_Version(УникальныйИдентификатор));
	
	Создан = UUID_Timestamp(УникальныйИдентификатор);
	Если ЗначениеЗаполнено(Создан) Тогда 
		Описание.Добавить(Создан);
	КонецЕсли;
	
	Адрес = UUID_Node(УникальныйИдентификатор);
	Если ЗначениеЗаполнено(Адрес) Тогда 
		Описание.Добавить(Адрес);
	КонецЕсли;
	
	ЭлементыФормы.Описание.Заголовок = ирОбщий.СтрСоединитьЛкс(Описание, "/");
	
КонецПроцедуры

// Возвращает время создания GUID'а
Функция UUID_Timestamp(ГУИД) Экспорт
        
	Если Мин(6, 1*Сред(ГУИД, 15, 1)) <> 1 Тогда 
		Возврат Дата("00010101");
	КонецЕсли;
	
	// Например ГУИД равен: bdb62d89-cede-11e4-b12b-d4ae52b5e909
    // Дата содержится в первых символах, bdb62d89-cede-11e4 которые нужно переставить задом наперед: 11e4-cede-bdb62d89
    Строка16 = Сред(ГУИД, 15, 4) + Сред(ГУИД, 10, 4) + Сред(ГУИД, 1, 8);
    
    // Убираем "лишние" знаки "-"(тире).
    Строка16 = СтрЗаменить(Строка16, "-", "");
    
    // Убираем первый символ, так как в нем содержится версия стандарта (зашит в седьмой октет)
    Строка15 = Сред(Строка16, 2);
    
    // Получаем timestamp в 60 бит : 1E4 CEDE BDB6 2D89
    ЧислоСек = 0;
    Для Позиция = 1 По СтрДлина(Строка15) Цикл
        ЧислоСек = ЧислоСек + Найти("123456789abcdef",Сред(Строка15,Позиция,1))*Pow(16,СтрДлина(Строка15) - Позиция);
    КонецЦикла;
    ЧислоСек = ЧислоСек / 10000000;
    
    // Прибавляем к дате начала Григореанского календаря
    Дата = Дата(1582, 10, 15, 00, 00, 00) + ЧислоСек + СмещениеСтандартногоВремени() + СмещениеЛетнегоВремени();
	 
	Если 1900 > Год(Дата) Или Дата > ТекущаяДата() Тогда
		Дата = Дата("00010101");
	КонецЕсли;
		
	Возврат Дата
    
КонецФункции

// Возвращает версию GUID'а
Функция UUID_Version(ГУИД) Экспорт
    
    // Пусть ГУИД равен: bdb62d89-cede-11e4-b12b-d4ae52b5e909
    // Тогда номер версии содержится в старшем байте седьмого октета
	
    Возврат СтрПолучитьСтроку("Time-based
	|DCE Security (POSIX)
	|Name-based (MD5 hashing)
	|Random
	|Name-based (SHA-1 hashing)
	|Unknown version", Мин(6, 1*Сред(ГУИД, 15, 1)));
    
КонецФункции

// Возвращает mac-адрес сервера
Функция UUID_Node(ГУИД) Экспорт

    // Пусть ГУИД равен: bdb62d89-cede-11e4-b12b-d4ae52b5e909
    // Тогда MAC-адрес в последней части
    Строка12 = Сред(ГУИД, 25);
    
    // Разделим на октеты
    Результат = "";
    Для Позиция = 1 По СтрДлина(Строка12) Цикл
        Если Позиция % 2 = 1 Тогда
            Результат = Результат + " ";
        КонецЕсли;
        Результат = Результат + ВРЕГ(Сред(Строка12,Позиция,1));
    КонецЦикла;
    Результат = СтрЗаменить(СокрЛП(Результат), " ", ":");
    
    Возврат Результат;
    
КонецФункции

#КонецОбласти

ирОбщий.ИнициироватьФормуЛкс(ЭтаФорма, "Обработка.ирПлатформа.Форма.УникальныйИдентификатор");
